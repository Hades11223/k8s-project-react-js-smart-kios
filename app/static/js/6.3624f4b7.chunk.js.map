{"version":3,"sources":["../node_modules/qr.js/lib/mode.js","../node_modules/qr.js/lib/ErrorCorrectLevel.js","../node_modules/qr.js/lib/Polynomial.js","../node_modules/qr.js/lib/math.js","../node_modules/qrcode.react/lib/index.js","../node_modules/qr.js/lib/QRCode.js","../node_modules/qr.js/lib/8BitByte.js","../node_modules/qr.js/lib/RSBlock.js","../node_modules/qr.js/lib/BitBuffer.js","../node_modules/qr.js/lib/util.js"],"names":["module","exports","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","L","M","Q","H","math","__webpack_require__","QRPolynomial","num","shift","undefined","length","Error","offset","this","Array","i","prototype","get","index","getLength","multiply","e","j","gexp","glog","mod","ratio","QRMath","n","LOG_TABLE","EXP_TABLE","_typeof","obj","Symbol","iterator","constructor","_extends","Object","assign","target","arguments","source","key","hasOwnProperty","call","apply","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","ReferenceError","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","React","QRCodeImpl","ErrorCorrectLevel","convertStr","str","out","charcode","charCodeAt","String","fromCharCode","DEFAULT_PROPS","size","level","bgColor","fgColor","includeMargin","MARGIN_SIZE","DEFAULT_IMG_SCALE","generatePath","modules","margin","ops","row","y","start","cell","x","concat","join","excavateModules","excavation","slice","map","h","w","getImageSettings","cells","imageSettings","numCells","defaultSize","Math","floor","scale","width","height","excavate","floorX","floorY","ceil","SUPPORTS_PATH2D","Path2D","addPath","QRCodeCanvas","_React$PureComponent","_getPrototypeOf2","_this","_len","args","_key","imgLoaded","setState","PureComponent","_image","complete","handleImageLoad","update","nextProps","_this$props$imageSett","_nextProps$imageSetti","src","_this$props","qrcode","addData","make","_canvas","canvas","ctx","getContext","calculatedImageSettings","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","state","drawImage","_this2","_this$props2","style","otherProps","canvasStyle","img","imgSrc","createElement","display","onLoad","ref","_ref","Fragment","_ref2","QRCodeSVG","_React$PureComponent2","_this$props3","image","xlinkHref","preserveAspectRatio","fgPath","shapeRendering","viewBox","d","QRCode","renderAs","Component","defaultProps","BitByte","RSBlock","BitBuffer","util","Polynomial","typeNumber","errorCorrectLevel","moduleCount","dataCache","dataList","proto","data","newData","isDark","col","getModuleCount","rsBlocks","getRSBlocks","buffer","totalDataCount","dataCount","put","mode","getLengthInBits","write","makeImpl","getBestMaskPattern","test","maskPattern","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","r","c","minLostPoint","pattern","lostPoint","getLostPoint","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","beginFill","moveTo","lineTo","endFill","pos","getPatternPosition","bits","getBCHTypeNumber","getBCHTypeInfo","inc","bitIndex","byteIndex","dark","getMask","PAD0","PAD1","putBit","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","totalCount","max","rsPoly","getErrorCorrectPolynomial","modPoly","modIndex","totalCodeCount","QR8bitByte","ECL","QRRSBlock","RS_BLOCK_TABLE","rsBlock","getRsBlockTable","list","count","QRBitBuffer","bufIndex","bit","Mode","QRMaskPattern","QRUtil","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHDigit","digit","errorCorrectLength","a","type","qrCode","sameCount","darkCount","abs"],"mappings":"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","file":"static/js/6.3624f4b7.chunk.js","sourcesContent":["module.exports = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3\n};","module.exports = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2\n};","var math = require('./math');\n\nfunction QRPolynomial(num, shift) {\n  if (num.length == undefined) {\n    throw new Error(num.length + \"/\" + shift);\n  }\n\n  var offset = 0;\n\n  while (offset < num.length && num[offset] == 0) {\n    offset++;\n  }\n\n  this.num = new Array(num.length - offset + shift);\n\n  for (var i = 0; i < num.length - offset; i++) {\n    this.num[i] = num[i + offset];\n  }\n}\n\nQRPolynomial.prototype = {\n  get: function get(index) {\n    return this.num[index];\n  },\n  getLength: function getLength() {\n    return this.num.length;\n  },\n  multiply: function multiply(e) {\n    var num = new Array(this.getLength() + e.getLength() - 1);\n\n    for (var i = 0; i < this.getLength(); i++) {\n      for (var j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j)));\n      }\n    }\n\n    return new QRPolynomial(num, 0);\n  },\n  mod: function mod(e) {\n    if (this.getLength() - e.getLength() < 0) {\n      return this;\n    }\n\n    var ratio = math.glog(this.get(0)) - math.glog(e.get(0));\n    var num = new Array(this.getLength());\n\n    for (var i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i);\n    }\n\n    for (var i = 0; i < e.getLength(); i++) {\n      num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);\n    } // recursive call\n\n\n    return new QRPolynomial(num, 0).mod(e);\n  }\n};\nmodule.exports = QRPolynomial;","var QRMath = {\n  glog: function glog(n) {\n    if (n < 1) {\n      throw new Error(\"glog(\" + n + \")\");\n    }\n\n    return QRMath.LOG_TABLE[n];\n  },\n  gexp: function gexp(n) {\n    while (n < 0) {\n      n += 255;\n    }\n\n    while (n >= 256) {\n      n -= 255;\n    }\n\n    return QRMath.EXP_TABLE[n];\n  },\n  EXP_TABLE: new Array(256),\n  LOG_TABLE: new Array(256)\n};\n\nfor (var i = 0; i < 8; i++) {\n  QRMath.EXP_TABLE[i] = 1 << i;\n}\n\nfor (var i = 8; i < 256; i++) {\n  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n}\n\nfor (var i = 0; i < 255; i++) {\n  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n}\n\nmodule.exports = QRMath;","'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types'); // qr.js doesn't handle error level of zero (M) so we need to do it right,\n// thus the deep require.\n\n\nvar QRCodeImpl = require('qr.js/lib/QRCode');\n\nvar ErrorCorrectLevel = require('qr.js/lib/ErrorCorrectLevel'); // TODO: pull this off of the QRCode class type so it matches.\n// Convert from UTF-16, forcing the use of byte-mode encoding in our QR Code.\n// This allows us to encode Hanji, Kanji, emoji, etc. Ideally we'd do more\n// detection and not resort to byte-mode if possible, but we're trading off\n// a smaller library for a smaller amount of data we can potentially encode.\n// Based on http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/\n\n\nfunction convertStr(str) {\n  var out = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var charcode = str.charCodeAt(i);\n\n    if (charcode < 0x0080) {\n      out += String.fromCharCode(charcode);\n    } else if (charcode < 0x0800) {\n      out += String.fromCharCode(0xc0 | charcode >> 6);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      out += String.fromCharCode(0xe0 | charcode >> 12);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else {\n      // This is a surrogate pair, so we'll reconsitute the pieces and work\n      // from that\n      i++;\n      charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      out += String.fromCharCode(0xf0 | charcode >> 18);\n      out += String.fromCharCode(0x80 | charcode >> 12 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    }\n  }\n\n  return out;\n}\n\nvar DEFAULT_PROPS = {\n  size: 128,\n  level: 'L',\n  bgColor: '#FFFFFF',\n  fgColor: '#000000',\n  includeMargin: false\n};\nvar PROP_TYPES = process.env.NODE_ENV !== 'production' ? {\n  value: PropTypes.string.isRequired,\n  size: PropTypes.number,\n  level: PropTypes.oneOf(['L', 'M', 'Q', 'H']),\n  bgColor: PropTypes.string,\n  fgColor: PropTypes.string,\n  includeMargin: PropTypes.bool,\n  imageSettings: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    excavate: PropTypes.bool,\n    x: PropTypes.number,\n    y: PropTypes.number\n  })\n} : {};\nvar MARGIN_SIZE = 4; // This is *very* rough estimate of max amount of QRCode allowed to be covered.\n// It is \"wrong\" in a lot of ways (area is a terrible way to estimate, it\n// really should be number of modules covered), but if for some reason we don't\n// get an explicit height or width, I'd rather default to something than throw.\n\nvar DEFAULT_IMG_SCALE = 0.1;\n\nfunction generatePath(modules) {\n  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ops = [];\n  modules.forEach(function (row, y) {\n    var start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        // M0 0h7v1H0z injects the space with the move and drops the comma,\n        // saving a char per operation\n        ops.push(\"M\".concat(start + margin, \" \").concat(y + margin, \"h\").concat(x - start, \"v1H\").concat(start + margin, \"z\"));\n        start = null;\n        return;\n      } // end of row, clean up or skip\n\n\n      if (x === row.length - 1) {\n        if (!cell) {\n          // We would have closed the op above already so this can only mean\n          // 2+ light modules in a row.\n          return;\n        }\n\n        if (start === null) {\n          // Just a single dark module.\n          ops.push(\"M\".concat(x + margin, \",\").concat(y + margin, \" h1v1H\").concat(x + margin, \"z\"));\n        } else {\n          // Otherwise finish the current line.\n          ops.push(\"M\".concat(start + margin, \",\").concat(y + margin, \" h\").concat(x + 1 - start, \"v1H\").concat(start + margin, \"z\"));\n        }\n\n        return;\n      }\n\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join('');\n} // We could just do this in generatePath, except that we want to support\n// non-Path2D canvas, so we need to keep it an explicit step.\n\n\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map(function (row, y) {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n\n    return row.map(function (cell, x) {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n\n      return false;\n    });\n  });\n}\n\nfunction getImageSettings(props, cells) {\n  var imageSettings = props.imageSettings,\n      size = props.size,\n      includeMargin = props.includeMargin;\n\n  if (imageSettings == null) {\n    return null;\n  }\n\n  var margin = includeMargin ? MARGIN_SIZE : 0;\n  var numCells = cells.length + margin * 2;\n  var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  var scale = numCells / size;\n  var w = (imageSettings.width || defaultSize) * scale;\n  var h = (imageSettings.height || defaultSize) * scale;\n  var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  var excavation = null;\n\n  if (imageSettings.excavate) {\n    var floorX = Math.floor(x);\n    var floorY = Math.floor(y);\n    var ceilW = Math.ceil(w + x - floorX);\n    var ceilH = Math.ceil(h + y - floorY);\n    excavation = {\n      x: floorX,\n      y: floorY,\n      w: ceilW,\n      h: ceilH\n    };\n  }\n\n  return {\n    x: x,\n    y: y,\n    h: h,\n    w: w,\n    excavation: excavation\n  };\n} // For canvas we're going to switch our drawing mode based on whether or not\n// the environment supports Path2D. We only need the constructor to be\n// supported, but Edge doesn't actually support the path (string) type\n// argument. Luckily it also doesn't support the addPath() method. We can\n// treat that as the same thing.\n\n\nvar SUPPORTS_PATH2D = function () {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}();\n\nvar QRCodeCanvas = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(QRCodeCanvas, _React$PureComponent);\n\n  function QRCodeCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QRCodeCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QRCodeCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"_canvas\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_image\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      imgLoaded: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleImageLoad\", function () {\n      _this.setState({\n        imgLoaded: true\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(QRCodeCanvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._image && this._image.complete) {\n        this.handleImageLoad();\n      }\n\n      this.update();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$props$imageSett, _nextProps$imageSetti;\n\n      var currentSrc = (_this$props$imageSett = this.props.imageSettings) === null || _this$props$imageSett === void 0 ? void 0 : _this$props$imageSett.src;\n      var nextSrc = (_nextProps$imageSetti = nextProps.imageSettings) === null || _nextProps$imageSetti === void 0 ? void 0 : _nextProps$imageSetti.src;\n\n      if (currentSrc !== nextSrc) {\n        this.setState({\n          imgLoaded: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          size = _this$props.size,\n          level = _this$props.level,\n          bgColor = _this$props.bgColor,\n          fgColor = _this$props.fgColor,\n          includeMargin = _this$props.includeMargin,\n          imageSettings = _this$props.imageSettings; // We'll use type===-1 to force QRCode to automatically pick the best type\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n\n      if (this._canvas != null) {\n        var canvas = this._canvas;\n        var ctx = canvas.getContext('2d');\n\n        if (!ctx) {\n          return;\n        }\n\n        var cells = qrcode.modules;\n\n        if (cells === null) {\n          return;\n        }\n\n        var margin = includeMargin ? MARGIN_SIZE : 0;\n        var numCells = cells.length + margin * 2;\n        var calculatedImageSettings = getImageSettings(this.props, cells);\n\n        if (imageSettings != null && calculatedImageSettings != null) {\n          if (calculatedImageSettings.excavation != null) {\n            cells = excavateModules(cells, calculatedImageSettings.excavation);\n          }\n        } // We're going to scale this so that the number of drawable units\n        // matches the number of cells. This avoids rounding issues, but does\n        // result in some potentially unwanted single pixel issues between\n        // blocks, only in environments that don't support Path2D.\n\n\n        var pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        var scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale); // Draw solid background, only paint dark modules.\n\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n\n        if (SUPPORTS_PATH2D) {\n          // $FlowFixMe: Path2D c'tor doesn't support args yet.\n          ctx.fill(new Path2D(generatePath(cells, margin)));\n        } else {\n          cells.forEach(function (row, rdx) {\n            row.forEach(function (cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n\n        if (this.state.imgLoaded && this._image && calculatedImageSettings != null) {\n          ctx.drawImage(this._image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          size = _this$props2.size,\n          level = _this$props2.level,\n          bgColor = _this$props2.bgColor,\n          fgColor = _this$props2.fgColor,\n          style = _this$props2.style,\n          includeMargin = _this$props2.includeMargin,\n          imageSettings = _this$props2.imageSettings,\n          otherProps = _objectWithoutProperties(_this$props2, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"style\", \"includeMargin\", \"imageSettings\"]);\n\n      var canvasStyle = _objectSpread({\n        height: size,\n        width: size\n      }, style);\n\n      var img = null;\n      var imgSrc = imageSettings && imageSettings.src;\n\n      if (imageSettings != null && imgSrc != null) {\n        img = React.createElement(\"img\", {\n          src: imgSrc,\n          style: {\n            display: 'none'\n          },\n          onLoad: this.handleImageLoad,\n          ref: function ref(_ref) {\n            return _this2._image = _ref;\n          }\n        });\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"canvas\", _extends({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: function ref(_ref2) {\n          return _this2._canvas = _ref2;\n        }\n      }, otherProps)), img);\n    }\n  }]);\n\n  return QRCodeCanvas;\n}(React.PureComponent);\n\n_defineProperty(QRCodeCanvas, \"defaultProps\", DEFAULT_PROPS);\n\nif (process.env.NODE_ENV !== 'production') {\n  QRCodeCanvas.propTypes = PROP_TYPES;\n}\n\nvar QRCodeSVG = /*#__PURE__*/function (_React$PureComponent2) {\n  _inherits(QRCodeSVG, _React$PureComponent2);\n\n  function QRCodeSVG() {\n    _classCallCheck(this, QRCodeSVG);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRCodeSVG).apply(this, arguments));\n  }\n\n  _createClass(QRCodeSVG, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          value = _this$props3.value,\n          size = _this$props3.size,\n          level = _this$props3.level,\n          bgColor = _this$props3.bgColor,\n          fgColor = _this$props3.fgColor,\n          includeMargin = _this$props3.includeMargin,\n          imageSettings = _this$props3.imageSettings,\n          otherProps = _objectWithoutProperties(_this$props3, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"imageSettings\"]); // We'll use type===-1 to force QRCode to automatically pick the best type\n\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n      var cells = qrcode.modules;\n\n      if (cells === null) {\n        return null;\n      }\n\n      var margin = includeMargin ? MARGIN_SIZE : 0;\n      var numCells = cells.length + margin * 2;\n      var calculatedImageSettings = getImageSettings(this.props, cells);\n      var image = null;\n\n      if (imageSettings != null && calculatedImageSettings != null) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n\n        image = React.createElement(\"image\", {\n          xlinkHref: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\"\n        });\n      } // Drawing strategy: instead of a rect per module, we're going to create a\n      // single path for the dark modules and layer that on top of a light rect,\n      // for a total of 2 DOM nodes. We pay a bit more in string concat but that's\n      // way faster than DOM ops.\n      // For level 1, 441 nodes -> 2\n      // For level 40, 31329 -> 2\n\n\n      var fgPath = generatePath(cells, margin);\n      return React.createElement(\"svg\", _extends({\n        shapeRendering: \"crispEdges\",\n        height: size,\n        width: size,\n        viewBox: \"0 0 \".concat(numCells, \" \").concat(numCells)\n      }, otherProps), React.createElement(\"path\", {\n        fill: bgColor,\n        d: \"M0,0 h\".concat(numCells, \"v\").concat(numCells, \"H0z\")\n      }), React.createElement(\"path\", {\n        fill: fgColor,\n        d: fgPath\n      }), image);\n    }\n  }]);\n\n  return QRCodeSVG;\n}(React.PureComponent);\n\n_defineProperty(QRCodeSVG, \"defaultProps\", DEFAULT_PROPS);\n\nif (process.env.NODE_ENV !== 'production') {\n  QRCodeSVG.propTypes = PROP_TYPES;\n}\n\nvar QRCode = function QRCode(props) {\n  var renderAs = props.renderAs,\n      otherProps = _objectWithoutProperties(props, [\"renderAs\"]);\n\n  var Component = renderAs === 'svg' ? QRCodeSVG : QRCodeCanvas;\n  return React.createElement(Component, otherProps);\n};\n\nQRCode.defaultProps = _objectSpread({\n  renderAs: 'canvas'\n}, DEFAULT_PROPS);\nmodule.exports = QRCode;","var BitByte = require('./8BitByte');\n\nvar RSBlock = require('./RSBlock');\n\nvar BitBuffer = require('./BitBuffer');\n\nvar util = require('./util');\n\nvar Polynomial = require('./Polynomial');\n\nfunction QRCode(typeNumber, errorCorrectLevel) {\n  this.typeNumber = typeNumber;\n  this.errorCorrectLevel = errorCorrectLevel;\n  this.modules = null;\n  this.moduleCount = 0;\n  this.dataCache = null;\n  this.dataList = [];\n} // for client side minification\n\n\nvar proto = QRCode.prototype;\n\nproto.addData = function (data) {\n  var newData = new BitByte(data);\n  this.dataList.push(newData);\n  this.dataCache = null;\n};\n\nproto.isDark = function (row, col) {\n  if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n    throw new Error(row + \",\" + col);\n  }\n\n  return this.modules[row][col];\n};\n\nproto.getModuleCount = function () {\n  return this.moduleCount;\n};\n\nproto.make = function () {\n  // Calculate automatically typeNumber if provided is < 1\n  if (this.typeNumber < 1) {\n    var typeNumber = 1;\n\n    for (typeNumber = 1; typeNumber < 40; typeNumber++) {\n      var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n      var buffer = new BitBuffer();\n      var totalDataCount = 0;\n\n      for (var i = 0; i < rsBlocks.length; i++) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      for (var i = 0; i < this.dataList.length; i++) {\n        var data = this.dataList[i];\n        buffer.put(data.mode, 4);\n        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n        data.write(buffer);\n      }\n\n      if (buffer.getLengthInBits() <= totalDataCount * 8) break;\n    }\n\n    this.typeNumber = typeNumber;\n  }\n\n  this.makeImpl(false, this.getBestMaskPattern());\n};\n\nproto.makeImpl = function (test, maskPattern) {\n  this.moduleCount = this.typeNumber * 4 + 17;\n  this.modules = new Array(this.moduleCount);\n\n  for (var row = 0; row < this.moduleCount; row++) {\n    this.modules[row] = new Array(this.moduleCount);\n\n    for (var col = 0; col < this.moduleCount; col++) {\n      this.modules[row][col] = null; //(col + row) % 3;\n    }\n  }\n\n  this.setupPositionProbePattern(0, 0);\n  this.setupPositionProbePattern(this.moduleCount - 7, 0);\n  this.setupPositionProbePattern(0, this.moduleCount - 7);\n  this.setupPositionAdjustPattern();\n  this.setupTimingPattern();\n  this.setupTypeInfo(test, maskPattern);\n\n  if (this.typeNumber >= 7) {\n    this.setupTypeNumber(test);\n  }\n\n  if (this.dataCache == null) {\n    this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n  }\n\n  this.mapData(this.dataCache, maskPattern);\n};\n\nproto.setupPositionProbePattern = function (row, col) {\n  for (var r = -1; r <= 7; r++) {\n    if (row + r <= -1 || this.moduleCount <= row + r) continue;\n\n    for (var c = -1; c <= 7; c++) {\n      if (col + c <= -1 || this.moduleCount <= col + c) continue;\n\n      if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n        this.modules[row + r][col + c] = true;\n      } else {\n        this.modules[row + r][col + c] = false;\n      }\n    }\n  }\n};\n\nproto.getBestMaskPattern = function () {\n  var minLostPoint = 0;\n  var pattern = 0;\n\n  for (var i = 0; i < 8; i++) {\n    this.makeImpl(true, i);\n    var lostPoint = util.getLostPoint(this);\n\n    if (i == 0 || minLostPoint > lostPoint) {\n      minLostPoint = lostPoint;\n      pattern = i;\n    }\n  }\n\n  return pattern;\n};\n\nproto.createMovieClip = function (target_mc, instance_name, depth) {\n  var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n  var cs = 1;\n  this.make();\n\n  for (var row = 0; row < this.modules.length; row++) {\n    var y = row * cs;\n\n    for (var col = 0; col < this.modules[row].length; col++) {\n      var x = col * cs;\n      var dark = this.modules[row][col];\n\n      if (dark) {\n        qr_mc.beginFill(0, 100);\n        qr_mc.moveTo(x, y);\n        qr_mc.lineTo(x + cs, y);\n        qr_mc.lineTo(x + cs, y + cs);\n        qr_mc.lineTo(x, y + cs);\n        qr_mc.endFill();\n      }\n    }\n  }\n\n  return qr_mc;\n};\n\nproto.setupTimingPattern = function () {\n  for (var r = 8; r < this.moduleCount - 8; r++) {\n    if (this.modules[r][6] != null) {\n      continue;\n    }\n\n    this.modules[r][6] = r % 2 == 0;\n  }\n\n  for (var c = 8; c < this.moduleCount - 8; c++) {\n    if (this.modules[6][c] != null) {\n      continue;\n    }\n\n    this.modules[6][c] = c % 2 == 0;\n  }\n};\n\nproto.setupPositionAdjustPattern = function () {\n  var pos = util.getPatternPosition(this.typeNumber);\n\n  for (var i = 0; i < pos.length; i++) {\n    for (var j = 0; j < pos.length; j++) {\n      var row = pos[i];\n      var col = pos[j];\n\n      if (this.modules[row][col] != null) {\n        continue;\n      }\n\n      for (var r = -2; r <= 2; r++) {\n        for (var c = -2; c <= 2; c++) {\n          if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    }\n  }\n};\n\nproto.setupTypeNumber = function (test) {\n  var bits = util.getBCHTypeNumber(this.typeNumber);\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n  }\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n  }\n};\n\nproto.setupTypeInfo = function (test, maskPattern) {\n  var data = this.errorCorrectLevel << 3 | maskPattern;\n  var bits = util.getBCHTypeInfo(data); // vertical\t\t\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 6) {\n      this.modules[i][8] = mod;\n    } else if (i < 8) {\n      this.modules[i + 1][8] = mod;\n    } else {\n      this.modules[this.moduleCount - 15 + i][8] = mod;\n    }\n  } // horizontal\n\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 8) {\n      this.modules[8][this.moduleCount - i - 1] = mod;\n    } else if (i < 9) {\n      this.modules[8][15 - i - 1 + 1] = mod;\n    } else {\n      this.modules[8][15 - i - 1] = mod;\n    }\n  } // fixed module\n\n\n  this.modules[this.moduleCount - 8][8] = !test;\n};\n\nproto.mapData = function (data, maskPattern) {\n  var inc = -1;\n  var row = this.moduleCount - 1;\n  var bitIndex = 7;\n  var byteIndex = 0;\n\n  for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n    if (col == 6) col--;\n\n    while (true) {\n      for (var c = 0; c < 2; c++) {\n        if (this.modules[row][col - c] == null) {\n          var dark = false;\n\n          if (byteIndex < data.length) {\n            dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n          }\n\n          var mask = util.getMask(maskPattern, row, col - c);\n\n          if (mask) {\n            dark = !dark;\n          }\n\n          this.modules[row][col - c] = dark;\n          bitIndex--;\n\n          if (bitIndex == -1) {\n            byteIndex++;\n            bitIndex = 7;\n          }\n        }\n      }\n\n      row += inc;\n\n      if (row < 0 || this.moduleCount <= row) {\n        row -= inc;\n        inc = -inc;\n        break;\n      }\n    }\n  }\n};\n\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\n\nQRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {\n  var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n  var buffer = new BitBuffer();\n\n  for (var i = 0; i < dataList.length; i++) {\n    var data = dataList[i];\n    buffer.put(data.mode, 4);\n    buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n    data.write(buffer);\n  } // calc num max data.\n\n\n  var totalDataCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalDataCount += rsBlocks[i].dataCount;\n  }\n\n  if (buffer.getLengthInBits() > totalDataCount * 8) {\n    throw new Error(\"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\");\n  } // end code\n\n\n  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n    buffer.put(0, 4);\n  } // padding\n\n\n  while (buffer.getLengthInBits() % 8 != 0) {\n    buffer.putBit(false);\n  } // padding\n\n\n  while (true) {\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD0, 8);\n\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD1, 8);\n  }\n\n  return QRCode.createBytes(buffer, rsBlocks);\n};\n\nQRCode.createBytes = function (buffer, rsBlocks) {\n  var offset = 0;\n  var maxDcCount = 0;\n  var maxEcCount = 0;\n  var dcdata = new Array(rsBlocks.length);\n  var ecdata = new Array(rsBlocks.length);\n\n  for (var r = 0; r < rsBlocks.length; r++) {\n    var dcCount = rsBlocks[r].dataCount;\n    var ecCount = rsBlocks[r].totalCount - dcCount;\n    maxDcCount = Math.max(maxDcCount, dcCount);\n    maxEcCount = Math.max(maxEcCount, ecCount);\n    dcdata[r] = new Array(dcCount);\n\n    for (var i = 0; i < dcdata[r].length; i++) {\n      dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n    }\n\n    offset += dcCount;\n    var rsPoly = util.getErrorCorrectPolynomial(ecCount);\n    var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n    var modPoly = rawPoly.mod(rsPoly);\n    ecdata[r] = new Array(rsPoly.getLength() - 1);\n\n    for (var i = 0; i < ecdata[r].length; i++) {\n      var modIndex = i + modPoly.getLength() - ecdata[r].length;\n      ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n    }\n  }\n\n  var totalCodeCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalCodeCount += rsBlocks[i].totalCount;\n  }\n\n  var data = new Array(totalCodeCount);\n  var index = 0;\n\n  for (var i = 0; i < maxDcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < dcdata[r].length) {\n        data[index++] = dcdata[r][i];\n      }\n    }\n  }\n\n  for (var i = 0; i < maxEcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < ecdata[r].length) {\n        data[index++] = ecdata[r][i];\n      }\n    }\n  }\n\n  return data;\n};\n\nmodule.exports = QRCode;","var mode = require('./mode');\n\nfunction QR8bitByte(data) {\n  this.mode = mode.MODE_8BIT_BYTE;\n  this.data = data;\n}\n\nQR8bitByte.prototype = {\n  getLength: function getLength(buffer) {\n    return this.data.length;\n  },\n  write: function write(buffer) {\n    for (var i = 0; i < this.data.length; i++) {\n      // not JIS ...\n      buffer.put(this.data.charCodeAt(i), 8);\n    }\n  }\n};\nmodule.exports = QR8bitByte;","// ErrorCorrectLevel\nvar ECL = require('./ErrorCorrectLevel');\n\nfunction QRRSBlock(totalCount, dataCount) {\n  this.totalCount = totalCount;\n  this.dataCount = dataCount;\n}\n\nQRRSBlock.RS_BLOCK_TABLE = [// L\n// M\n// Q\n// H\n// 1\n[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2\n[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3\n[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4\t\t\n[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5\n[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6\n[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7\t\t\n[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8\n[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9\n[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10\t\t\n[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11\n[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12\n[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13\n[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14\n[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15\n[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], // 16\n[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17\n[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18\n[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19\n[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20\n[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21\n[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22\n[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23\n[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24\n[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25\n[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26\n[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27\n[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28\n[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29\n[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30\n[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31\n[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32\n[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33\n[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34\n[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35\n[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36\n[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37\n[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38\n[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39\n[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40\n[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\nQRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\n  if (rsBlock == undefined) {\n    throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n  }\n\n  var length = rsBlock.length / 3;\n  var list = new Array();\n\n  for (var i = 0; i < length; i++) {\n    var count = rsBlock[i * 3 + 0];\n    var totalCount = rsBlock[i * 3 + 1];\n    var dataCount = rsBlock[i * 3 + 2];\n\n    for (var j = 0; j < count; j++) {\n      list.push(new QRRSBlock(totalCount, dataCount));\n    }\n  }\n\n  return list;\n};\n\nQRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {\n  switch (errorCorrectLevel) {\n    case ECL.L:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\n    case ECL.M:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\n    case ECL.Q:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\n    case ECL.H:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\n    default:\n      return undefined;\n  }\n};\n\nmodule.exports = QRRSBlock;","function QRBitBuffer() {\n  this.buffer = new Array();\n  this.length = 0;\n}\n\nQRBitBuffer.prototype = {\n  get: function get(index) {\n    var bufIndex = Math.floor(index / 8);\n    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n  },\n  put: function put(num, length) {\n    for (var i = 0; i < length; i++) {\n      this.putBit((num >>> length - i - 1 & 1) == 1);\n    }\n  },\n  getLengthInBits: function getLengthInBits() {\n    return this.length;\n  },\n  putBit: function putBit(bit) {\n    var bufIndex = Math.floor(this.length / 8);\n\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n\n    this.length++;\n  }\n};\nmodule.exports = QRBitBuffer;","var Mode = require('./mode');\n\nvar Polynomial = require('./Polynomial');\n\nvar math = require('./math');\n\nvar QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\nvar QRUtil = {\n  PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n  getBCHTypeInfo: function getBCHTypeInfo(data) {\n    var d = data << 10;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n      d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n    }\n\n    return (data << 10 | d) ^ QRUtil.G15_MASK;\n  },\n  getBCHTypeNumber: function getBCHTypeNumber(data) {\n    var d = data << 12;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n      d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n    }\n\n    return data << 12 | d;\n  },\n  getBCHDigit: function getBCHDigit(data) {\n    var digit = 0;\n\n    while (data != 0) {\n      digit++;\n      data >>>= 1;\n    }\n\n    return digit;\n  },\n  getPatternPosition: function getPatternPosition(typeNumber) {\n    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n  },\n  getMask: function getMask(maskPattern, i, j) {\n    switch (maskPattern) {\n      case QRMaskPattern.PATTERN000:\n        return (i + j) % 2 == 0;\n\n      case QRMaskPattern.PATTERN001:\n        return i % 2 == 0;\n\n      case QRMaskPattern.PATTERN010:\n        return j % 3 == 0;\n\n      case QRMaskPattern.PATTERN011:\n        return (i + j) % 3 == 0;\n\n      case QRMaskPattern.PATTERN100:\n        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n\n      case QRMaskPattern.PATTERN101:\n        return i * j % 2 + i * j % 3 == 0;\n\n      case QRMaskPattern.PATTERN110:\n        return (i * j % 2 + i * j % 3) % 2 == 0;\n\n      case QRMaskPattern.PATTERN111:\n        return (i * j % 3 + (i + j) % 2) % 2 == 0;\n\n      default:\n        throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n  },\n  getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n    var a = new Polynomial([1], 0);\n\n    for (var i = 0; i < errorCorrectLength; i++) {\n      a = a.multiply(new Polynomial([1, math.gexp(i)], 0));\n    }\n\n    return a;\n  },\n  getLengthInBits: function getLengthInBits(mode, type) {\n    if (1 <= type && type < 10) {\n      // 1 - 9\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 10;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 9;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 8;\n\n        case Mode.MODE_KANJI:\n          return 8;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else if (type < 27) {\n      // 10 - 26\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 12;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 11;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case Mode.MODE_KANJI:\n          return 10;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else if (type < 41) {\n      // 27 - 40\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 14;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 13;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case Mode.MODE_KANJI:\n          return 12;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else {\n      throw new Error(\"type:\" + type);\n    }\n  },\n  getLostPoint: function getLostPoint(qrCode) {\n    var moduleCount = qrCode.getModuleCount();\n    var lostPoint = 0; // LEVEL1\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var dark = qrCode.isDark(row, col);\n\n        for (var r = -1; r <= 1; r++) {\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n\n          for (var c = -1; c <= 1; c++) {\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n\n            if (r == 0 && c == 0) {\n              continue;\n            }\n\n            if (dark == qrCode.isDark(row + r, col + c)) {\n              sameCount++;\n            }\n          }\n        }\n\n        if (sameCount > 5) {\n          lostPoint += 3 + sameCount - 5;\n        }\n      }\n    } // LEVEL2\n\n\n    for (var row = 0; row < moduleCount - 1; row++) {\n      for (var col = 0; col < moduleCount - 1; col++) {\n        var count = 0;\n        if (qrCode.isDark(row, col)) count++;\n        if (qrCode.isDark(row + 1, col)) count++;\n        if (qrCode.isDark(row, col + 1)) count++;\n        if (qrCode.isDark(row + 1, col + 1)) count++;\n\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    } // LEVEL3\n\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount - 6; col++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount - 6; row++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {\n          lostPoint += 40;\n        }\n      }\n    } // LEVEL4\n\n\n    var darkCount = 0;\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount; row++) {\n        if (qrCode.isDark(row, col)) {\n          darkCount++;\n        }\n      }\n    }\n\n    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n    return lostPoint;\n  }\n};\nmodule.exports = QRUtil;"],"sourceRoot":""}